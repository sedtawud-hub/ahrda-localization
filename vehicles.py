import numpy as np
import matplotlib.pyplot as plt
import math
import control as ct

def vehicle_update(v, u, params={}):
    """Vehicle dynamics for cruise control system.

    Parameters
    ----------
    x : array
         System state: car velocity in m/s
    u : array
         System input: [throttle, gear], where throttle is
         a float between 0 and 1, gear is an integer between 1 and 5,
         and road_slope is in rad.

    Returns
    -------
    float
        Vehicle acceleration

    """
    from math import copysign, sin
    sign = lambda x: copysign(1, x)         # define the sign() function
    
    # Set up the system parameters
    m = params.get('m', 1600.)
    g = params.get('g', 9.8)
    Cr = params.get('Cr', 0.01)
    Cd = params.get('Cd', 0.32)
    rho = params.get('rho', 1.3)
    A = params.get('A', 2.4)
    alpha = params.get(
        'alpha', [40, 25, 16, 12, 10])      # gear ratio / wheel radius
    wheel_base = params.get('wb', 2.5)

    # Define variables for vehicle state and inputs
    throttle = np.clip(u[0], 0, 1)     # vehicle throttle
    gear = 1                      # vehicle gear
    steering_angle = u[1]

    # Force generated by the engine

    omega = alpha[int(gear)-1] * v      # engine angular speed
    F = alpha[int(gear)-1] * motor_torque(omega, params) * throttle
    
    Fr  = m * g * Cr * sign(v) if v > 0 else 0

    Fa = 1/2 * rho * Cd * A * abs(v) * v

    Fd = Fr + Fa
    dv = (F - Fd) / m
    
    yaw_rate = v * steering_angle / wheel_base

    return dv, yaw_rate
    
def motor_torque(omega, params={}):
    # Set up the system parameters
    Tm = params.get('Tm', 190.)             # engine torque constant
    omega_m = params.get('omega_m', 420.)   # peak engine angular speed
    beta = params.get('beta', 0.4)          # peak engine rolloff

    return np.clip(Tm * (1 - beta * (omega/omega_m - 1)**2), 0, None)

def plot_engine_curve():
    plt.figure()
    plt.suptitle('Torque curves for typical car engine')

    # Figure 4.2a - single torque curve as function of omega
    omega_range = np.linspace(0, 700, 701)
    plt.subplot(2, 2, 1)
    plt.plot(omega_range, [motor_torque(w) for w in omega_range])
    plt.xlabel('Angular velocity $\omega$ [rad/s]')
    plt.ylabel('Torque $T$ [Nm]')
    plt.grid(True, linestyle='dotted')

    plt.subplot(2, 2, 2)
    v_range = np.linspace(0, 70, 71)
    alpha = [40, 25, 16, 12, 10]
    for gear in range(5):
        omega_range = alpha[gear] * v_range
        plt.plot(v_range, [motor_torque(w) for w in omega_range],
                color='blue', linestyle='solid')

    # Set up the axes and style
    plt.axis([0, 70, 100, 200])
    plt.grid(True, linestyle='dotted')

    # Add labels
    plt.text(11.5, 120, '$n$=1')
    plt.text(24, 120, '$n$=2')
    plt.text(42.5, 120, '$n$=3')
    plt.text(58.5, 120, '$n$=4')
    plt.text(58.5, 185, '$n$=5')
    plt.xlabel('Velocity $v$ [m/s]')
    plt.ylabel('Torque $T$ [Nm]')

    plt.show(block=False)

def motion_model(x, u, dt):
    """
    param:
        state: [[x], [y], [yaw], [v]]
        input: [[v],[yaw_rate]]
    return:
        state: [[x], [y], [yaw], [v]]
    """
    F = np.array([[1.0, 0, 0, 0], [0, 1.0, 0, 0], [0, 0, 1.0, 0], [0, 0, 0, 0]])

    B = np.array([[dt * math.cos(x[2, 0]), 0], [dt * math.sin(x[2, 0]), 0], [0.0, dt], [1.0, 0.0]])

    x = F.dot(x) + B.dot(u)
    #
    # x = 1, 0, 0, 0   x    dt*cos(r), 0      v
    # y   0, 1, 0, 0 X y +  dt*sin(r), 0   X  Yaw_rate
    # r   0, 0, 1, 0   r    0,         dt
    # v   0, 0, 0, 0   1    1,         0
    return x

if __name__ == '__main__':
    u = [0, 0]
    dt = 0.1
    x = np.zeros((4,1))
    fig, axs = plt.subplots(2)
    fig.suptitle('Vertically stacked subplots')
    for i in range(100):
        if i > 10:
            u =  [1, 0.1]
        dv, yaw_rate = vehicle_update(x[3,0], u)
        u_motion = np.array([[dv, yaw_rate]]).T
        x = motion_model(x, u_motion, dt)
        axs[0].plot(x[0,0], x[1,0], 'og')
        axs[1].plot(i, x[3,0],'.b')
        axs[1].plot(i, u[0],'.r')
    plt.show()